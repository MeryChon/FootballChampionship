// <auto-generated />
using System;
using FootballChampionship.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FootballChampionship.Migrations
{
    [DbContext(typeof(FootballchampionshipsDbContext))]
    partial class FootballchampionshipsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("FootballChampionship.Domain.Model.Match", b =>
                {
                    b.Property<int>("FirstTeamId")
                        .HasColumnType("int");

                    b.Property<int>("SecondTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchResultId")
                        .HasColumnType("int");

                    b.HasKey("FirstTeamId", "SecondTeamId");

                    b.HasIndex("MatchResultId")
                        .IsUnique()
                        .HasFilter("[MatchResultId] IS NOT NULL");

                    b.HasIndex("SecondTeamId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("FootballChampionship.Domain.Model.MatchResult", b =>
                {
                    b.Property<int>("MatchResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("ResultType")
                        .HasColumnType("int");

                    b.Property<int?>("WinningTeamId")
                        .HasColumnType("int");

                    b.HasKey("MatchResultId");

                    b.HasIndex("WinningTeamId");

                    b.ToTable("MatchResult");
                });

            modelBuilder.Entity("FootballChampionship.Domain.Model.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("FootballChampionship.Domain.Model.Match", b =>
                {
                    b.HasOne("FootballChampionship.Domain.Model.Team", "FirstTeam")
                        .WithMany("MathesAsFirst")
                        .HasForeignKey("FirstTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballChampionship.Domain.Model.MatchResult", "MatchResult")
                        .WithOne("Match")
                        .HasForeignKey("FootballChampionship.Domain.Model.Match", "MatchResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballChampionship.Domain.Model.Team", "SecondTeam")
                        .WithMany("MatchesAsSecond")
                        .HasForeignKey("SecondTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstTeam");

                    b.Navigation("MatchResult");

                    b.Navigation("SecondTeam");
                });

            modelBuilder.Entity("FootballChampionship.Domain.Model.MatchResult", b =>
                {
                    b.HasOne("FootballChampionship.Domain.Model.Team", "WinningTeam")
                        .WithMany()
                        .HasForeignKey("WinningTeamId");

                    b.Navigation("WinningTeam");
                });

            modelBuilder.Entity("FootballChampionship.Domain.Model.MatchResult", b =>
                {
                    b.Navigation("Match");
                });

            modelBuilder.Entity("FootballChampionship.Domain.Model.Team", b =>
                {
                    b.Navigation("MatchesAsSecond");

                    b.Navigation("MathesAsFirst");
                });
#pragma warning restore 612, 618
        }
    }
}
